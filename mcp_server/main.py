# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:50:14+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Path, Query

from models import (
    AppointmentListViewModel,
    AppointmentRemindersInputModel,
    AppointmentReminderViewModel,
    AppointmentViewModel,
    AuthorizedCompanyListViewModel,
    AvailabilityInputModel,
    BusinessPermissionListViewModel,
    BusinessServiceListViewModel,
    BusinessServiceViewModel,
    BusinessUserInputModel,
    BusinessUserListViewModel,
    BusinessUserUpdateModel,
    BusinessUserViewModel,
    CalendarAuthViewModel,
    CalendarBlockInputModel,
    CalendarBlockListViewModel,
    CalendarBlockUpdateModel,
    CalendarBlockViewModel,
    CompanyDomainInputModel,
    CompanyDomainListViewModel,
    CompanyDomainUpdateModel,
    CompanyDomainViewModel,
    CompanyInputModel,
    CompanyUpdateModel,
    CompanyViewModel,
    ContentResult,
    CustomerListViewModel,
    CustomerPrivacyViewModel,
    CustomerViewModel,
    EmailTemplateInputModel,
    EmailTemplateListViewModel,
    GoogleServiceAccountCreds,
    LocationInputModel,
    LocationListViewModel,
    LocationsInputModel,
    LocationUpdateModel,
    LocationViewModel,
    MasterEmailTemplateSettingsViewModel,
    MasterTemplateSettingsInputModel,
    RegionInputModel,
    RegionListViewModel,
    RegionUpdateModel,
    RegionViewModel,
    ResourceAllocationInputModel,
    ResourceAllocationListViewModel,
    ResourceAllocationUpdateModel,
    ResourceAllocationViewModel,
    ResourceAvailabilityViewModel,
    ResourceBlockInputModel,
    ResourceBlockListViewModel,
    ResourceBlockUpdateModel,
    ResourceBlockViewModel,
    ResourceGroupInputModel,
    ResourceGroupListViewModel,
    ResourceGroupUpdateModel,
    ResourceGroupViewModel,
    ResourceImageInputModel,
    ResourceInputModel,
    ResourceListViewModel,
    ResourcesInputModel,
    ResourcesUpdateModel,
    ResourceUpdateModel,
    ResourceViewModel,
    ScheduleInputModel,
    ScheduleListViewModel,
    ScheduleUpdateModel,
    ScheduleViewModel,
    ServiceAllocationInputModel,
    ServiceAllocationListViewModel,
    ServiceAllocationsInputModel,
    ServiceAllocationUpdateModel,
    ServiceAllocationViewModel,
    ServiceAvailabilityViewModel,
    ServiceBlockInputModel,
    ServiceBlockListViewModel,
    ServiceBlockUpdateModel,
    ServiceBlockViewModel,
    ServiceCalendarInputModel,
    ServiceCalendarViewModel,
    ServiceGroupInputModel,
    ServiceGroupListViewModel,
    ServiceGroupViewModel,
    ServiceImageInputModel,
    ServiceInputModel,
    ServiceListViewModel,
    ServiceUpdateModel,
    ServiceViewModel,
    SetupV1LocationsBulkPostResponse,
    SetupV1LocationsIdServicesPostRequest,
    SetupV1ResourcesBulkPostResponse,
    SetupV1ResourcesBulkPutResponse,
    SetupV1ResourcesIdReassignAppointmentsResourceIdPutResponse,
    SetupV1ResourcesIdServicesPostRequest,
    SetupV1ResourcesIdServicesPutRequest,
    SetupV1ServicesIdAllocationsBulkPostResponse,
    SystemTimezoneViewModel,
    TimezoneViewModel,
)

app = MCPProxy(
    description="Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.\r\n<br><br>\r\nTake the API for a test drive. Just click on the Authorize button below and authenticate. \r\nYou can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.\r\n<br><br>\r\nThe API has two interfaces, consumer and setup. \r\n<ul>\r\n<li>\r\nThe consumer interface provides all the endpoints required for implementing consumer booking flows.\r\n</li>\r\n<li>\r\nThe setup interface provides endpoints for profile configuration and setup.\r\n</li>\r\n</ul>\r\nToggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.\r\n",
    title='OnSched Setup API',
    version='v1',
    servers=[{'url': 'https://sandbox-api.onsched.com/'}],
)


@app.get(
    '/setup/v1/appointments',
    description=""" <p>Use this endpoint to return a <b>List of Appointments</b>. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointments Overview</a></p> """,
    tags=['appointment_management', 'calendar_management', 'customer_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_appointments(
    location_id: Optional[str] = Query(None, alias='locationId'),
    email: Optional[str] = None,
    lastname: Optional[str] = None,
    service_id: Optional[str] = Query(None, alias='serviceId'),
    calendar_id: Optional[str] = Query(None, alias='calendarId'),
    resource_id: Optional[str] = Query(None, alias='resourceId'),
    customer_id: Optional[str] = Query(None, alias='customerId'),
    service_allocation_id: Optional[str] = Query(None, alias='serviceAllocationId'),
    start_date: Optional[datetime] = Query(None, alias='startDate'),
    end_date: Optional[datetime] = Query(None, alias='endDate'),
    status: Optional[str] = None,
    booked_by: Optional[str] = Query(None, alias='bookedBy'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Appointments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/appointments/{id}',
    description=""" <p>Use this endpoint to return an <b>Appointment</b> object. A valid <b>appointment id</b> is required. Find appointment id's by using the <i>GET​/setup​/v1​/appointments</i> endpoint.</p> """,
    tags=['appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_appointments__id(id: str):
    """
    Get Appointment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/appointments/{id}/reassign/resource/{resourceId}',
    description=""" <p>Use this endpoint to <b>Reassign</b> an appointment from one resource to another. The result returned is a single appointment that was reassigned to the target resource. A valid <b>appointment id</b> and <b>resource id</b> is required. Find appointment id's by using the <i>GET /setup/v1/appointments</i> endpoint, find resource id's by using the <i>GET ​/setup​/v1​/resources</i> endpoint.</p> """,
    tags=['appointment_management', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_appointments__id_reassign_resource__resource_id(
    id: str, resource_id: str = Path(..., alias='resourceId')
):
    """
    Reassign Appointment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/businessusers',
    description=""" <p>Use this endpoint to return a <b>List of Business Users and their Roles</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p> """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_businessusers(
    location_id: Optional[str] = Query(None, alias='locationId'),
    email: Optional[str] = None,
    role: Optional[str] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/businessusers',
    description=""" <p>Use this endpoint to <b>Create</b> a Business User. If not specified, the business location defaults to the primary business location. </p>
<p>Required fields: <b>Name</b>, <b>Email</b> and <b>Role</b><b>Note:</b> If the businessUser is a bookable resource (bizresource) then a resourceId is required.</p>
<p>For role, use one of the values listed. <b>Business Roles Include: bizowner</b> (Business Owner), <b>bizadmin</b> (Business Administrator), <b>bizresource</b> (Business User - Bookable Resource).</p>
<p>The <b>sendRegistrationInvite</b> parameter is available to API consumers for their own use. It provides no added functionality in OnSched.</p> """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_businessusers(body: BusinessUserInputModel = None):
    """
    Create User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/businessusers/permissions',
    description=""" <p>Use this endpoint to return a <b>List of Business User Permissions by Role</b>. Results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p> """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_businessusers_permissions(
    role: Optional[str] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List User Permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/businessusers/{email}/companies',
    description=""" <p>Use this endpoint to return a <b>List of Companies</b> associated with the business users email requested. A business user <b>email</b> address is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p> """,
    tags=['user_management', 'company_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_businessusers__email_companies(
    email: str,
    search_text: Optional[str] = Query(None, alias='searchText'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List User Companies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/businessusers/{id}',
    description=""" <p>Use this endpoint to permanently <b>Delete</b> a Business User. A valid <b>businessUser id</b> is required.</p> """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_businessusers__id(id: str):
    """
    Delete User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/businessusers/{id}',
    description=""" <p>Use this endpoint to return a <b>Business User</b> object. A valid <b>businessUser id</b> is required. Find businessUser id's using the <i>GET /setup/v1/businessusers</i> endpoint.</p> """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_businessusers__id(id: str):
    """
    Get User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/businessusers/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> a Business User. A valid <b>businessUser id</b> is required.</p>
<p>
  <b>Business Roles Include: bizowner</b> (Business Owner), <b>bizadmin</b> (Business Administrator), <b>bizresource</b> (Business User - Bookable Resource).</p> """,
    tags=['user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_businessusers__id(id: str, body: BusinessUserUpdateModel = None):
    """
    Update User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/calendars',
    description=""" <p>Use this endpoint to return a <b>List of Calendars</b> from the requested location. If not specified, the business location defaults to the primary business location. </p> """,
    tags=['calendar_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_calendars(
    location_id: Optional[str] = Query(None, alias='locationId'),
    deleted: Optional[bool] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Calendars
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/calendars',
    description=""" <p>
  <b>DEPRECATING:</b> Create Calendar</p>
<p>We are no longer supporting Multiple Calendar Functionality as it is part of our Legacy Application and has no relevance in the API.</p> """,
    tags=['appointment_management', 'calendar_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_calendars(body: ScheduleInputModel = None):
    """
    DEPRECATING: Create
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/calendars/block/{id}',
    description=""" <p>Use this endpoint to permanently <b>Delete</b> a calendar block. A valid <b>calendarBlock id</b> is required.</p> """,
    tags=['calendar_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_calendars_block__id(id: str):
    """
    Delete Calendar Block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/calendars/block/{id}',
    description=""" <p>Use this endpoint to <b>Create</b> a Calendar Block. A valid <b>calendarBlock id</b> is required. Refer to the <i>POST ​/setup​/v1​/calendars​/{id}​/block</i> endpoint for fieldnames and details.</p> """,
    tags=['calendar_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_calendars_block__id(id: str, body: CalendarBlockUpdateModel = None):
    """
    Update Calendar Block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/calendars/blocks/{id}',
    description=""" <p>Use this endpoint to return a <b>Calendar Block</b>. A valid <b>calendarBlock id</b> is required. </p> """,
    tags=['calendar_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_calendars_blocks__id(id: str):
    """
    Get Calendar Block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/calendars/{id}',
    description=""" <p>Use this endpoint to <b>Delete</b> a calendar object. A valid <b>calendar id</b> is required. The calendar is not permanently deleted and can be recovered by using the <i>PUT ​/setup​/v1​/calendars​/{id}​/recover </i>endpoint.</p> """,
    tags=['calendar_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_calendars__id(id: str):
    """
    Delete Calendar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/calendars/{id}',
    description=""" <p>Use this endpoint to return a <b>Calendar</b> object. A valid <b>calendar id</b> is required.</p> """,
    tags=['calendar_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_calendars__id(id: str):
    """
    Get Calendar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/calendars/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> a calendar object. A valid <b>calendar id</b> is required. When your company was created a calendar object was automatically created with 24-hour weekly availability. Its <b>name = Main</b>, the <b>type = resource</b> and by default the <b>interval = 30 mins</b>. We are currently supporting resource calendar type. Other types were part of our Legacy Application and has no relevance in the API product.</p> """,
    tags=['calendar_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_calendars__id(id: str, body: ScheduleUpdateModel = None):
    """
    Update Calendar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/calendars/{id}/block',
    description=""" <p>Use this endpoint to <b>Create</b> a Calendar Block. A valid <b>calendar id</b> is required.</p>
<p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>.</p>
<p>Calendar blocks can be set to specific time ranges or for the whole day. Th block a whole day set the startTime to 0 and endTime to 2400.</p>
<p>Calendar blocks can be for a specific date range instance or set to repeat at a specified frequency.</p>
<p>
  <b>Repeat object: (repeats = true)</b>
</p>
<p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>
<p>Use the <b>interval</b> property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. <b>If using the repeat functionality an interval value is required</b>.</p>
<p>
  <b>DAILY BLOCKS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>
<p>
  <b>WEEKLY BLOCKS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b>  is required and should be set to <b>“W”</b>.  You must specify the <b>weekdays</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>. For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.</p>
<p>
  <b>MONTHLY BLOCKS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly, <b>monthDay</b> is the day of the month you want blocked.  If monthDay=’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For <b>monthType M</b>, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>
<p>
  <b>Repeats will end on the date specified by the end date.</b>
</p> """,
    tags=['calendar_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_calendars__id_block(id: str, body: CalendarBlockInputModel = None):
    """
    Create Calendar Block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/calendars/{id}/blocks',
    description=""" <p>Use this endpoint to return a <b>List of Calendar Blocks</b> for the requested calendar. A valid <b>calendar id</b> is required. </p> """,
    tags=['calendar_management', 'appointment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_calendars__id_blocks(
    id: str, offset: Optional[int] = None, limit: Optional[int] = None
):
    """
    List Calendar Blocks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/calendars/{id}/recover',
    description=""" <p>Use this endpoint to <b>Recover</b> a previously deleted calendar object. A valid <b>calendar id</b> is required.</p> """,
    tags=['calendar_management', 'resource_recovery_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_calendars__id_recover(id: str):
    """
    Recover Calendar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/calendars/{id}/services',
    description=""" <p>Use this endpoint to return a <b>List of Linked Services</b> of a calendar object. A valid <b>calendar id</b> is required. Find calendar id's by using the <i>GET /setup/v1/calendars</i> endpoint.</p> """,
    tags=['calendar_management', 'calendar_service_linking'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_calendars__id_services(
    id: str, offset: Optional[int] = None, limit: Optional[int] = None
):
    """
    List Calendar Services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/companies',
    description=""" <p>Use this endpoint to return the <b>Authorized Company</b> information. The company is the main entity that oversees all business locations defined below it, hierarchically. </p>
<p>Access to the company credentials gives you access to all business locations defined in the authorized company. Client credentials resolve to a single company and are purposely hidden from this endpoint.</p> """,
    tags=['company_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_companies():
    """
    Get Company
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/companies',
    description=""" <p>Use this endpoint to <b>Create</b> a new authorized company.</p>
<p>
  <b>Note: Special API Partner credentials are required to access this endpoint.</b>
</p>
<p>The <b>name, registrationEmail, phone, country</b> and <b>timezoneName</b> are required fields. For <b>country</b> use the standard ISO 3166 2-character country code.</p>
<p>The <b>timezoneName</b> must be expressed as an IANA Timezone e.g., <i>America/New_York</i>.</p>
<p>For more information: <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone IANA Wiki</a></p> """,
    tags=['company_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_companies(body: CompanyInputModel = None):
    """
    Create Company
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/companies',
    description=""" <p>Use this endpoint to <b>Update</b> the authorized company information. Your client credentials resolve to a single company. The timezoneName must be expressed as an IANA Timezone, e.g., <i>America/New_York</i>. </p>
<p>For more information: <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone IANA Wiki</a></p> """,
    tags=['company_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_companies(body: CompanyUpdateModel = None):
    """
    Update Company
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/companies/domains',
    description=""" <p>Use this endpoint to return a <b>List of Company Domains</b> for the authorized company. To share the OnSchedJS booking widget on your website or in your application your domain must be listed.</p> """,
    tags=['company_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_companies_domains():
    """
    List Company Domains
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/companies/domains',
    description=""" <p>Use this endpoint to <b>Create</b> an OnSchedJs domain for your authorized company. To share the OnSchedJS booking widget on your website or in your application you must add the domain.</p> """,
    tags=['company_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_companies_domains(body: CompanyDomainInputModel = None):
    """
    Create Company Domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/companies/domains/{id}',
    description=""" <p>Use this endpoint to <b>Delete</b> an OnSchedJs domain from your authorized company. A valid <b>companyDomain id</b> is required.</p> """,
    tags=['company_data_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_companies_domains__id(id: str):
    """
    Delete Company Domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/companies/domains/{id}',
    description=""" <p>Use this endpoint to return a <b>Company Domain</b> object. A valid <b>companyDomain id</b> is required. </p> """,
    tags=['company_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_companies_domains__id(id: str):
    """
    Get Company Domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/companies/domains/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> an OnSchedJs domain for your authorized company. A valid <b>companyDomain id</b> is required.</p> """,
    tags=['company_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_companies_domains__id(id: str, body: CompanyDomainUpdateModel = None):
    """
    Update Company Domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/companies/email/templates',
    description=""" <p>Use this endpoint to return a <b>List of Email Templates</b> that are provided and may be customized. If the template has been customized, the customized property is true. The scope parameter indicates if the email template has been customized at the Business Location level or Company level. This endpoint returns <b>only company level templates</b>, so the scope is always company.</p> """,
    tags=['email_template_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_companies_email_templates():
    """
    List Email Templates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/companies/email/templates/master',
    description=""" <p>Use this endpoint to <b>Delete Custom Master Email Template Settings</b>. Deleting a custom master email template setting will reactivate the original default OnSched template settings.</p> """,
    tags=['location_settings_management', 'company_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_companies_email_templates_master():
    """
    Delete Master Template Settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/companies/email/templates/master',
    description=""" <p>Use this endpoint to return the <b>Master Email Template Settings</b>. Settings exist for showing or hiding email panels and for changing color schemes. </p> """,
    tags=['location_settings_management', 'company_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_companies_email_templates_master():
    """
    Get Master Template Settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/companies/email/templates/master',
    description=""" <p>Use this endpoint to <b>Create Custom Master Email Template Settings</b>. Settings exist for showing or hiding email panels and for changing color schemes. Use the <i>GET ​/setup​/v1​/companies​/email​/templates</i> endpoint to display the settings offered. Changes to the Master Template Settings will be reflected in all business locations associated with this company. </p>
<p>The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new custom Master Template Settings file that will be used instead. If you delete it you are deleting the custom template settings you created and the original default Master Template created by OnSched would be reactivated.</p> """,
    tags=[
        'company_data_management',
        'location_settings_management',
        'resource_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_companies_email_templates_master(
    body: MasterTemplateSettingsInputModel = None,
):
    """
    Create Master Template Settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/companies/email/templates/{templateName}',
    description=""" <p>Use this endpoint to return the requested <b>Email Template</b>. If it wasn't customized the default template is returned. The response content is in html format. A valid emailTemplate <b>name</b> is required. Find template names by using the: <i>GET ​/setup​/v1​/companies​/email​/templates</i> endpoint. Note: The master template cannot be accessed here. </p>
<p>To create custom company email templates, go to the <i>POST ​/setup​/v1​/locations​/{id}​/email​/templates</i> endpoint and create a template using the Primary Business Location Id.</p> """,
    tags=['email_template_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_companies_email_templates__template_name(
    template_name: str = Path(..., alias='templateName')
):
    """
    Get Email Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/companies/regions',
    description=""" <p>Use this endpoint to return a list of <b>Regions</b> in the authorized company. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. </p> """,
    tags=['geographic_region_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_companies_regions(
    offset: Optional[int] = None, limit: Optional[int] = None
):
    """
    List Regions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/companies/regions',
    description=""" <p>Use this endpoint to <b>Create</b> a region object. Regions can be mapped to business locations. They can be used by the locations endpoints to filter locations by region id.</p> """,
    tags=['geographic_region_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_companies_regions(body: RegionInputModel = None):
    """
    Create Region
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/companies/regions/{id}',
    description=""" <p>Use this endpoint to <b>Delete</b> a region object. A valid <b>region id</b> is required. If the region is related to any business locations it won't be deleted. You must first remove any references to region id from the business locations prior to deleting.</p> """,
    tags=['geographic_region_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_companies_regions__id(id: str):
    """
    Delete Region
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/companies/regions/{id}',
    description=""" <p>Use this endpoint to return a <b>Region</b> object. A valid <b>region id</b> is required.</p> """,
    tags=['geographic_region_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_companies_regions__id(id: str):
    """
    Get Region
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/companies/regions/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> a region object. A valid <b>region id</b> is required.</p> """,
    tags=['geographic_region_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_companies_regions__id(id: str, body: RegionUpdateModel = None):
    """
    Update Region
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/companies/timezones/{date}',
    description=""" <p>Use this endpoint to return a <b>List of timezone names, timezoneIana and tzOffset values</b> calculated for the date requested. Daylight Savings may or may not apply depending on the date specified.</p> """,
    tags=['timezone_listing_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_companies_timezones__date(date: datetime):
    """
    List Time Zones
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/customers',
    description=""" <p>Use this endpoint to return a <b>List of Customers</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p> """,
    tags=['customer_data_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_customers(
    location_id: Optional[str] = Query(None, alias='locationId'),
    group_id: Optional[str] = Query(None, alias='groupId'),
    email: Optional[str] = None,
    lastname: Optional[str] = None,
    deleted: Optional[bool] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Customers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/customers/{id}',
    description=""" <p>Use this endpoint to return a <b>Customer</b> object. A valid <b>customer id</b> is required. Find customer id's by using the <i>GET /setup/v1/customers</i> endpoint.</p> """,
    tags=['customer_data_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_customers__id(id: str):
    """
    Get Customer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/customers/{id}/privacy',
    description=""" <p>Use this endpoint to return the <b>Customer</b> object. A valid <b>customer id</b> is required. Find customer id's using the <i>GET /setup/v1/customers</i> endpoint.</p> """,
    tags=['customer_data_management', 'user_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_customers__id_privacy(id: str):
    """
    Get Customer Data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/locations',
    description=""" <p>Use this endpoint to <b>List Business Locations</b> associated with your company. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
<p>
  <b>IMPORTANT DEPRECATION NOTICE</b>: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on <b>OCTOBER 15, 2022</b>. These fields are currently part of the <b>SETTINGS</b> object in all location endpoints: <b>businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.</b> If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: <b><i>support@onsched.com</i></b> as we do not want to interrupt your existing workflows.</p> """,
    tags=[
        'location_settings_management',
        'linked_services_operations',
        'resource_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_locations(
    name: Optional[str] = None,
    service_id: Optional[str] = Query(None, alias='serviceId'),
    friendly_id: Optional[str] = Query(None, alias='friendlyId'),
    deleted: Optional[bool] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Locations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/locations',
    description=""" <p>Use this endpoint to <b>Create</b> a new business location. The result is a business location object with a GUID assigned to the location.</p>
<p>The <b>name</b> and <b>timezoneName</b> fields are required. The <b>timezoneName</b> must be expressed as an IANA Timezone e.g., <i>America/New_York</i>. Refer to: <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone Wiki</a> for a listing of IANA time zones.</p>
<p>
  <b>Business hours</b> are set by defining the <b>startTime</b> and <b>endTime</b> values for each day available/open. All days of the week must be provided when setting availability. Days are defined as <b>sun, mon, tue, wed, thu, fri and sat</b>. Start and End Times are entered in <b>military format. e.g., 800 is 8:00am, 2230 is 10:30pm</b>. If there is no physical location and the business hours are irrelevant, set the hours to open 24 hours by setting startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0. </p>
<p>
  <b>Settings</b> can be set here. Booking timer minutes, book ahead restrictions and customer bookings per day are all available here. Please read about the settings scope parameter before setting these values as it may simplify your process.</p>
<p>
  <b>Settings Scope</b> can be set to the company or the business location level. You can have all locations use the same company level settings or individual business locations can define their own, business location scope. If you want to use the company settings throughout all locations, do not pass in <b>settings element</b>. To create business location scoped settings, pass in the <b>settings element</b> with the field values defined in the post body. </p>
<p>
  <b>Appointment Reminders</b> Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. <b>Interval</b> values are used to define the reminder interval: <b>1 = Hours</b>, <b>2 = Days</b> and <b>3 = Weeks</b>. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.</p>
<p>Example 1: <b>emailFirstReminder:  1, emailFirstReminderInterval:  2</b> - results in 1st reminder being sent <b>1 Day before</b> the appointment time.</p>
<p>Example 2: <b>emailSecondReminder: 3, emailSecondReminderInterval: 1</b> - results in 2nd reminder being sent <b>3 Hours before</b> the appointment time.</p>
<p>
  <b>IMPORTANT DEPRECATION NOTICE</b>: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on <b>OCTOBER 15, 2022</b>. These fields are currently part of the <b>SETTINGS</b> object in all location endpoints: <b>businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.</b> If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: <b><i>support@onsched.com</i></b> as we do not want to interrupt your existing workflows.</p> """,
    tags=['location_settings_management', 'geographic_region_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_locations(body: LocationInputModel = None):
    """
    Create Location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/locations/bulk',
    description=""" <p>Use this endpoint to <b>Create Bulk</b> business locations. The posted list of locations cannot exceed 100 location objects per transaction for performance purposes. The result is a list of new business location objects with a GUID assigned to each location.</p>
<p>The <b>name</b> and <b>timezoneName</b> fields are required. The <b>timezoneName</b> must be expressed as an IANA Timezone e.g., <i>America/New_York</i>. Refer to: <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone Wiki</a> for a listing of IANA time zones.</p>
<p>
  <b>Business hours</b> are set by defining the <b>startTime</b> and <b>endTime</b> values for each day available/open. All days of the week must be provided when setting availability. Days are defined as <b>sun, mon, tue, wed, thu, fri and sat</b>. Start and End Times are entered in <b>military format. e.g., 800 is 8:00am, 2230 is 10:30pm</b>. If there is no physical location and the business hours are irrelevant, set the hours to open 24 hours by setting startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0. </p>
<p>
  <b>Settings</b> can be set here. Booking timer minutes, book ahead restrictions and customer bookings per day are all available here. Please read about the settings scope parameter before setting these values as it may simplify your process.</p>
<p>
  <b>Settings Scope</b> can be set to the company or the business location level. You can have all locations use the same company level settings or individual business locations can define their own, business location scope. If you want to use the company settings throughout all locations, do not pass in <b>settings element</b>. To create business location scoped settings, pass in the <b>settings element</b> with the field values defined in the post body. </p>
<p>
  <b>Appointment Reminders</b> Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. <b>Interval</b> values are used to define the reminder interval: <b>1 = Hours</b>, <b>2 = Days</b> and <b>3 = Weeks</b>. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.</p>
<p>Example 1: <b>emailFirstReminder:  1, emailFirstReminderInterval:  2</b> - results in 1st reminder being sent <b>1 Day before</b> the appointment time.</p>
<p>Example 2: <b>emailSecondReminder: 3, emailSecondReminderInterval: 1</b> - results in 2nd reminder being sent <b>3 Hours before</b> the appointment time.</p>
<p>
  <b>IMPORTANT DEPRECATION NOTICE</b>: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on <b>OCTOBER 15, 2022</b>. These fields are currently part of the <b>SETTINGS</b> object in all location endpoints: <b>businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.</b> If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: <b><i>support@onsched.com</i></b> as we do not want to interrupt your existing workflows.</p> """,
    tags=[
        'location_settings_management',
        'company_data_management',
        'bulk_resource_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_locations_bulk(body: LocationsInputModel = None):
    """
    Create Locations Bulk
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/locations/services/{id}',
    description=""" <p>Use this endpoint to <b>Unlink</b> a location service from a business location. A valid <b>locationService id</b> is required. Find location services by using the <i>GET ​/setup​/v1​/locations​/{id}​/services</i> endpoint. </p> """,
    tags=['linked_services_operations', 'service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_locations_services__id(id: str):
    """
    Unlink Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/locations/services/{id}',
    description=""" <p>Use this endpoint to <b>Get a Linked Service</b>. A valid <b>locationService id</b> is required.</p> """,
    tags=['linked_services_operations', 'service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_locations_services__id(id: str):
    """
    Get Linked Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/locations/{id}',
    description=""" <p>Use this endpoint to <b>Delete</b> a business location. A valid business <b>location id</b> is required. The location is not permanently deleted and can be recovered by using the <i>PUT /setup​/v1​/locations​/{id}​/recover</i> endpoint.</p> """,
    tags=['location_settings_management', 'geographic_region_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_locations__id(id: str):
    """
    Delete Location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/locations/{id}',
    description=""" <p>Use this endpoint to return a <b>Location</b> object. A valid <b>location id</b> is required. If not specified, the business location defaults to the primary business location. Find all business location id's, by using the <i>GET /consumer/v1/locations</i> endpoint.</p>
<p>
  <b>IMPORTANT DEPRECATION NOTICE</b>: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on <b>OCTOBER 15, 2022</b>. These fields are currently part of the <b>SETTINGS</b> object in all location endpoints: <b>businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.</b> If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: <b><i>support@onsched.com</i></b> as we do not want to interrupt your existing workflows.</p> """,
    tags=['location_settings_management', 'geographic_region_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_locations__id(id: str):
    """
    Get Location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/locations/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> a business location object. A valid business <b>location id</b> is required. The optional removeRegion query parameter can be used to remove the region relationship from the location.</p>
<p>If the settings element is populated the scope will be set to the business location with the settings supplied. If your settings are uniform across all locations, then do not supply the settings element and the location will use the settings defined on the primary business location (company scoped). Company scoped settings cascade down to the locations. You can override any location that needs different settings by providing settings in the update model. Use the <i>PUT /setup/v1/locations/{id}/settings/scope/{settingsScope}</i> endpoint to change the settings scope only. This is typically used when switching from business location scope back to company.</p>
<p>Refer to: <i><b>POST ​/setup​/v1​/locations</b></i> endpoint for details.</p> """,
    tags=['location_settings_management', 'geographic_region_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_locations__id(
    id: str,
    remove_region: Optional[bool] = Query(None, alias='removeRegion'),
    body: LocationUpdateModel = None,
):
    """
    Update Location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/locations/{id}/appointmentreminders',
    description=""" <p>Use this endpoint to <b>Get Email and SMS appointment reminder settings</b> for the requested location. A valid business <b>location id</b> is required. </p> """,
    tags=['appointment_management', 'calendar_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_locations__id_appointmentreminders(id: str):
    """
    Get Reminders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/locations/{id}/appointmentreminders',
    description=""" <p>Use this endpoint to <b>Update</b> Email and SMS appointment reminder settings for the requested location. A valid business <b>location id</b> is required. </p>
<p>
  <b>Appointment Reminders</b> Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. <b>Interval</b> values are used to define the reminder interval: <b>1 = Hours</b>, <b>2 = Days</b> and <b>3 = Weeks</b>. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.</p>
<p>Example 1: <b>emailFirstReminder:  1, emailFirstReminderInterval:  2</b> - results in 1st reminder being sent <b>1 Day before</b> the appointment time.</p>
<p>Example 2: <b>emailSecondReminder: 3, emailSecondReminderInterval: 1</b> - results in 2nd reminder being sent <b>3 Hours before</b> the appointment time.</p> """,
    tags=['appointment_management', 'calendar_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_locations__id_appointmentreminders(
    id: str, body: AppointmentRemindersInputModel = None
):
    """
    Update Reminders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/locations/{id}/deleteallimages',
    description=""" <p>Use this endpoint to <b>Delete All</b> location images from the location blob storage container. An option exists to use upper case for matching the subdirectory name. Legacy apps stored pics using upper case while the API uses lower case names.</p> """,
    tags=['service_image_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_locations__id_deleteallimages(
    id: str, uppercase: Optional[bool] = None
):
    """
    Delete All Location Images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/locations/{id}/deleteimage',
    description=""" <p>Use this endpoint to <b>Delete</b> a previously uploaded location image. A valid business <b>location id</b> is required.</p> """,
    tags=['service_image_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_locations__id_deleteimage(id: str):
    """
    Delete Location Image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/locations/{id}/email/templates',
    description=""" <p>Use this endpoint to return a <b>List of Email Templates</b> that are provided and may be customized. If the template has been customized, the customized property is true. The scope parameter indicates if the email template has been customized. This endpoint returns <b>only company level templates</b>, so the scope is always company.</p> """,
    tags=['email_template_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_locations__id_email_templates(id: str):
    """
    List Email Templates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/locations/{id}/email/templates',
    description=""" <p>Use this endpoint to a <b>Create</b> a Custom Email Template. You must convert the content to a base64 encoded string. Updates to the primary business location create company scoped custom templates. Updates to non-primary business locations create business location scoped custom templates. The master template cannot be updated with this endpoint.</p>
<p>The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new email template that will be used instead. If you delete it, you are deleting the custom template you created and the original default template created by OnSched will be reactivated.</p> """,
    tags=['email_template_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_locations__id_email_templates(
    id: str, body: EmailTemplateInputModel = None
):
    """
    Create Custom Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/locations/{id}/email/templates/master',
    description=""" <p>Use this endpoint to <b>Delete Custom Master Email Template Settings</b>. A valid business <b>location id</b> is required. Deleting a custom master email template will reactivate the original default OnSched template settings.</p> """,
    tags=['location_settings_management', 'email_template_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_locations__id_email_templates_master(id: str):
    """
    Delete Master Template Settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/locations/{id}/email/templates/master',
    description=""" <p>Use this endpoint to get <b>Master Email Template Settings</b>. A valid business <b>location id</b> is required. Settings exist for showing or hiding panels and for changing color schemes. </p> """,
    tags=['location_settings_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_locations__id_email_templates_master(id: str):
    """
    Get Master Template Settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/locations/{id}/email/templates/master',
    description=""" <p>Use this endpoint to <b>Create Custom Master Email Template Settings</b>. A valid business <b>location id</b> is required. Settings exist for showing or hiding email panels and for changing color schemes. Use the <i>GET ​/setup​/v1​/locations​/{id}​/email​/templates​/masterSettings</i> endpoint to display the settings offered. Changes to the Master Template Settings will be reflected in all business locations associated with this company. </p>
<p>The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new custom Master Template Settings file that will be used instead. If you delete it, you are deleting the custom template settings you created and the original default Master Template created by OnSched would be reactivated.</p> """,
    tags=['location_settings_management', 'company_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_locations__id_email_templates_master(
    id: str, body: MasterTemplateSettingsInputModel = None
):
    """
    Create Master Template Settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/locations/{id}/email/templates/{templateName}',
    description=""" <p>Use this endpoint to <b>Delete</b> a Custom Email Template that was previously created. A valid business <b>location id</b> and email <b>templateName</b> are required. Deleting a custom email template will revert the template back to its default originally created by OnSched. Changes will be reflected in all business locations associated with this company.</p>
<p>The email template endpoints work a little differently than most. When you delete you are deleting the custom template you created, and the original default Email Template created by OnSched will be reactivated.</p> """,
    tags=['email_template_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_locations__id_email_templates__template_name(
    id: str, template_name: str = Path(..., alias='templateName')
):
    """
    Delete Custom Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/locations/{id}/email/templates/{templateName}',
    description=""" <p>Use this endpoint to return the requested <b>Email Template</b>. The template is from the primary business location. If it wasn't customized the default template is returned. The response content is in html format. A valid <b>emailTemplate name</b> is required. Find template names by using the <i>GET ​/setup​/v1​/locations​/{id}​/email​/templates</i> endpoint. Note: The master template cannot be accessed here. </p> """,
    tags=['email_template_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_locations__id_email_templates__template_name(
    id: str, template_name: str = Path(..., alias='templateName')
):
    """
    Get Email Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/locations/{id}/google/service/account',
    description=""" <p>Use this endpoint to <b>Delete</b> authorized access to all google calendar users in your organization. Upon deletion Google Calendars will no longer be synced for resources.</p> """,
    tags=['google_calendar_service_management', 'calendar_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_locations__id_google_service_account(id: str):
    """
    Delete Google Cal Access
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/locations/{id}/google/service/account',
    description=""" <p>Use this endpoint to <b>Authorize Access</b> to google calendar users in your organization. You must create/have a Google Service account as an admin of your GSuite, then save the credentials as a Json Key file. This <b>Json Key</b> and a valid business <b>location id</b> are required. </p> """,
    tags=[
        'google_calendar_service_management',
        'calendar_management',
        'calendar_service_linking',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_locations__id_google_service_account(
    id: str, body: GoogleServiceAccountCreds = None
):
    """
    Create Google Cal Access
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/locations/{id}/holidays/{holidayId}/{closed}',
    description=""" <p>Use this endpoint to <b>Update</b> Business Holidays as Opened or Closed. A valid business <b>location id</b> is required. If not specified, the business location defaults to the primary business location.</p>
<p>Holidays are automatically defined with the initial Post Location endpoint and are based on country code. Find your location holiday codes by using the: <i>GET /setup​/v1​/locations​/{id}</i> endpoint. Change your holidays to open or closed by passing in the <b>holidayId</b> along with the <b>closed</b> boolean value to change the status of a specific holiday. Pass in an <b>asterisk *</b> for the holidayId then all business holidays will be set as defined.</p> """,
    tags=['location_holiday_settings_management', 'calendar_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_locations__id_holidays__holiday_id__closed(
    id: str, holiday_id: str = Path(..., alias='holidayId'), closed: bool = ...
):
    """
    Update Location Holidays
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/locations/{id}/recover',
    description=""" <p>Use this endpoint to <b>Recover</b> a deleted business location. A valid business <b>location id</b> is required.</p> """,
    tags=['location_settings_management', 'geographic_region_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_locations__id_recover(id: str):
    """
    Recover Location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/locations/{id}/services',
    description=""" <p>Use this endpoint to <b>Delete All</b> location linked services from a business location. A valid business <b>location id</b> is required. </p> """,
    tags=['linked_services_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_locations__id_services(id: str):
    """
    Delete Linked Services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/locations/{id}/services',
    description=""" <p>Use this endpoint to return a list of <b>Location Linked Services</b>. A valid business <b>location id</b> is required. By default, there are no location linked services attached to a location. Refer to the: <i>POST /setup​/v1​/locations​/{id}​/services</i> for details. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p> """,
    tags=['linked_services_operations', 'location_settings_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_locations__id_services(
    id: str, offset: Optional[int] = None, limit: Optional[int] = None
):
    """
    List Location Linked Services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/locations/{id}/services',
    description=""" <p>Use this endpoint to <b>Link Services</b> to a location object. A valid business <b>location id</b> is required. By default, there are <i>no services linked</i> to a location. </p>
<p>Services are definable globally at the Company level and associated with the Primary Business Location, or at a Secondary Business Location. When accessing the Services endpoints, by default, API consumers are provided with a <b>combined</b> list of Services defined from both the Primary and Secondary Business Location.</p>
<p>If necessary, the list of Service(s) provided can be cherry-picked/linked to <b>only include specific Service(s)</b> by using this endpoint. This allows for a subset of defined Services to be provided for a location.</p>
<p>Supplying the list of services ids to cherry-pick/link to the location in the request body will explicitly define which Primary Location Services are offered by the specified business location.</p> """,
    tags=['linked_services_operations', 'resource_management', 'service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_locations__id_services(
    id: str, body: SetupV1LocationsIdServicesPostRequest = None
):
    """
    Create Linked Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/locations/{id}/settings/scope/{settingsScope}',
    description=""" <p>Use this endpoint to <b>Update</b> a business locations online booking settings scope. A valid business <b>location id</b> is required.</p>
<p>
  <b>settingsScope</b> values are <b>0 = company scope, 1 = business location scope</b>. To inherit the online settings defined in the primary business location, then use value = 0 for company scope. Otherwise, to override the settings for a specific location then use value = 1 for business location scope. <b>Note</b>: You cannot change the settings scope of the Primary Business Location.</p> """,
    tags=['location_settings_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_locations__id_settings_scope__settings_scope(
    id: str, settings_scope: str = Path(..., alias='settingsScope')
):
    """
    Update Location Scope
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/locations/{id}/uploadimage',
    description=""" <p>Use this endpoint to <b>Upload</b> an image to a location object. A valid business <b>location id</b> is required. You must convert the image to a <b>base64 encoded string</b> and pass that string as input along with your <b>filename</b>.</p> """,
    tags=['service_image_management', 'location_settings_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_locations__id_uploadimage(
    id: str, body: ResourceImageInputModel = None
):
    """
    Upload Location Image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/resourcegroups',
    description=""" <p>Use this endpoint to <b>List Resource Groups</b> for the specified location. If not specified, the business location defaults to the primary business location. <b>Name</b> is a required field.</p>
<p>Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the query parameters to filter the results further.</p> """,
    tags=['resource_group_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_resourcegroups(
    location_id: Optional[str] = Query(None, alias='locationId'),
    deleted: Optional[bool] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Resource Groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/resourcegroups',
    description=""" <p>Use this endpoint to <b>Create</b> a resourceGroup object. Resource groups are used to categorize your resources.</p> """,
    tags=['resource_group_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_resourcegroups(body: ResourceGroupInputModel = None):
    """
    Create Resource Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/resourcegroups/{id}',
    description=""" <p>Use this endpoint to <b>Delete</b> a resourceGroup object. A valid <b>resourceGroup id</b> is required. The resource group is not permanently deleted and can be recovered by using the <i>PUT ​/setup​/v1​/resourcegroups​/{id}​/recover</i> endpoint.</p> """,
    tags=['resource_group_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_resourcegroups__id(id: str):
    """
    Delete Resource Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/resourcegroups/{id}',
    description=""" <p>Use this endpoint to return a <b>Resource Group</b> object. A valid <b>resourceGroup id</b> is required. Find resourceGroup id's by using the <i>GET setup/v1/resourceGroups</i> endpoint.</p> """,
    tags=['resource_group_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_resourcegroups__id(id: str):
    """
    Get Resource Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/resourcegroups/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> a resourceGroup object. A valid <b>resourceGroup id</b> is required. </p> """,
    tags=['resource_group_handling', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_resourcegroups__id(id: str, body: ResourceGroupUpdateModel = None):
    """
    Update Resource Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/resourcegroups/{id}/recover',
    description=""" <p>Use this endpoint to <b>Recover</b> a deleted resourceGroup object. A valid <b>resourceGroup id</b> is required.</p> """,
    tags=['resource_group_handling', 'resource_recovery_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_resourcegroups__id_recover(id: str):
    """
    Recover Resource Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/resources',
    description=""" <p>Use this endpoint to return a <b>List of Resources</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p> """,
    tags=['resource_management', 'resource_group_handling', 'service_resource_listing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_resources(
    location_id: Optional[str] = Query(None, alias='locationId'),
    resource_group_id: Optional[str] = Query(None, alias='resourceGroupId'),
    email: Optional[str] = None,
    name: Optional[str] = None,
    deleted: Optional[bool] = None,
    google_auth_return_url: Optional[str] = Query(None, alias='googleAuthReturnUrl'),
    outlook_auth_return_url: Optional[str] = Query(None, alias='outlookAuthReturnUrl'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Resources
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/resources',
    description=""" <p>Use this endpoint to <b>Create</b> a new resource.</p>
<p>Required Fields: <b>Email Address</b> and <b>Name</b></p>
<p>Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the <i>POST ​/setup​/v1​/resources​/{id}​/services</i> endpoint for details about explicitly linking services.</p>
<p>Set the resource availability type by using the <b>recurringAvailability</b> flag. Set recurringAvailability to <b>True</b> for <b>Weekly Availability</b> or <b>False</b> for <b>Resource Allocations</b>.</p> """,
    tags=[
        'resource_management',
        'resource_group_handling',
        'linked_services_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_resources(
    google_auth_return_url: Optional[str] = Query(None, alias='googleAuthReturnUrl'),
    outlook_auth_return_url: Optional[str] = Query(None, alias='outlookAuthReturnUrl'),
    body: ResourceInputModel = None,
):
    """
    Create Resource
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/resources/allocations/{id}',
    description=""" <p>Use this endpoint to <b>Delete</b> a Resource Allocation. A valid <b>resourceAllocation id</b> is required.</p> """,
    tags=['resource_allocation_management', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_resources_allocations__id(id: str):
    """
    Delete Allocation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/resources/allocations/{id}',
    description=""" <p>Use this endpoint to return a <b>Resource Allocation</b>. A valid <b>resourceAllocation id</b> is required. </p> """,
    tags=['resource_allocation_management', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_resources_allocations__id(id: str):
    """
    Get Allocation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/resources/allocations/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> a resource allocation. A valid <b>resourceAllocation id</b> is required. Refer to the <i>POST /setup/v1/resources/{id}/allocations</i> endpoint for details.</p> """,
    tags=['resource_allocation_management', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_resources_allocations__id(
    id: str, body: ResourceAllocationUpdateModel = None
):
    """
    Update Allocation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/resources/block/{id}',
    description=""" <p>Use this endpoint to <b>Delete</b> a Resource Block. A valid <b>resourceBlock id</b> is required.</p> """,
    tags=['resource_block_management', 'calendar_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_resources_block__id(id: str):
    """
    Delete Block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/resources/block/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> a Resource Block. A valid <b>resourceBlock id</b> is required. Refer to the <i>POST ​/setup​/v1​/resources​/{id}​/block</i> endpoint for fieldnames and details.</p> """,
    tags=['resource_block_management', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_resources_block__id(id: str, body: ResourceBlockUpdateModel = None):
    """
    Update Block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/resources/blocks/{id}',
    description=""" <p>Use this endpoint to <b>Get</b> a Resource Block. A valid <b>resourceBlock id</b> is required.</p> """,
    tags=['calendar_management', 'resource_block_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_resources_blocks__id(id: str):
    """
    Get Block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/resources/bulk',
    description=""" <p>Use this endpoint to <b>Bulk Create</b> resources. Valid <b>resource ids</b> are required. The posted list of resources cannot exceed 100 resource objects per transaction for performance purposes.</p>
<p>Required Fields: <b>Email Address</b> and <b>Name</b></p>
<p>Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the <i>POST ​/setup​/v1​/resources​/{id}​/services</i> endpoint for details about explicitly linking services.</p>
<p>Set the resource availability type by using the <b>recurringAvailability</b> flag. Set recurringAvailability to <b>True</b> for <b>Weekly Availability</b> or <b>False</b> for <b>Resource Allocations</b>.</p> """,
    tags=['bulk_resource_operations', 'resource_management', 'resource_group_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_resources_bulk(
    google_auth_return_url: Optional[str] = Query(None, alias='googleAuthReturnUrl'),
    outlook_auth_return_url: Optional[str] = Query(None, alias='outlookAuthReturnUrl'),
    body: ResourcesInputModel = None,
):
    """
    Create Resources Bulk
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/resources/bulk',
    description=""" <p>Use this endpoint to <b>Bulk Update</b> resources. Valid <b>resource id's</b> are required. The list of resources cannot exceed 100 resource objects per transaction for performance purposes.</p>
<p>Required Fields: <b>Email Address</b> and <b>Name</b></p>
<p>Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the <i>POST ​/setup​/v1​/resources​/{id}​/services</i> endpoint for details about explicitly linking services.</p>
<p>Set the resource availability type by using the <b>recurringAvailability</b> flag. Set recurringAvailability to <b>True</b> for <b>Weekly Availability</b> or <b>False</b> for <b>Resource Allocations</b>.</p> """,
    tags=['bulk_resource_operations', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_resources_bulk(
    google_auth_return_url: Optional[str] = Query(None, alias='googleAuthReturnUrl'),
    outlook_auth_return_url: Optional[str] = Query(None, alias='outlookAuthReturnUrl'),
    body: ResourcesUpdateModel = None,
):
    """
    Update Resources Bulk
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/resources/timezones',
    description=""" <p>Use this endpoint to return a <b>List of Time Zones</b>.</p> """,
    tags=['timezone_listing_management', 'resource_timezones_listing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_resources_timezones():
    """
    Get Time Zones
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/resources/{id}',
    description=""" <p>Use this endpoint to <b>Delete</b> a resource. The resource is not permanently deleted and can be recovered. A valid <b>resource id</b> is required.</p> """,
    tags=['resource_management', 'resource_recovery_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_resources__id(id: str):
    """
    Delete Resource
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/resources/{id}',
    description=""" <p>Use this endpoint to return a <b>Resource</b> object. A valid <b>resource id</b> is required. Find resource id's by using the: <i>GET /setup/v1/resources</i> endpoint.</p> """,
    tags=['resource_management', 'resource_url_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_resources__id(
    id: str,
    google_auth_return_url: Optional[str] = Query(None, alias='googleAuthReturnUrl'),
    outlook_auth_return_url: Optional[str] = Query(None, alias='outlookAuthReturnUrl'),
):
    """
    Get Resource
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/resources/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> a resource. A valid <b>resource id</b> is required.</p>
<p>Required Fields: <b>Email Address</b> and <b>Name</b></p>
<p>Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the <i>POST ​/setup​/v1​/resources​/{id}​/services</i> endpoint for details about explicitly linking services.</p>
<p>Set the resource availability type by using the <b>recurringAvailability</b> flag. Set recurringAvailability to <b>True</b> for <b>Weekly Availability</b> or <b>False</b> for <b>Resource Allocations</b>.</p> """,
    tags=['resource_management', 'resource_url_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_resources__id(
    id: str,
    google_auth_return_url: Optional[str] = Query(None, alias='googleAuthReturnUrl'),
    outlook_auth_return_url: Optional[str] = Query(None, alias='outlookAuthReturnUrl'),
    body: ResourceUpdateModel = None,
):
    """
    Update Resource
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/resources/{id}/allocations',
    description=""" <p>Use this endpoint to return a list of <b>Resource Allocations</b> for a specified resource. We recommend using allocations if a resource's schedule changes frequently from day to day or week to week. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p> """,
    tags=['resource_allocation_management', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_resources__id_allocations(
    id: str,
    start_date: Optional[datetime] = Query(None, alias='startDate'),
    end_date: Optional[datetime] = Query(None, alias='endDate'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Resource Allocations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/resources/{id}/allocations',
    description=""" <p>Use this endpoint to <b>Create</b> a resource allocation for a resource. A valid <b>resource id</b> is required.</p>
<p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>. Resource allocations can be set to specific time ranges or for the whole day by setting startTime=0 and endTime=2400. They can repeat for a specific date range instance or set to repeat at a specified frequency.</p>
<p>
  <b>Repeat object: (repeats = true)</b>
</p>
<p>The <b>frequency</b> can be set to a value of <b>D, W or M </b>for <b>Day, Week</b> or <b>Month</b> respectively.</p>
<p>Use the <b>interval</b> property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  <b>If using the repeat functionality an interval value is required</b>.</p>
<p>
  <b>DAILY ALLOCATIONS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>
<p>
  <b>WEEKLY ALLOCATIONS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b> is required and should be set to <b>“W”</b>. You must specify the <b>“weekdays”</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.</p>
<p>
  <b>MONTHLY ALLOCATIONS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly. <b>monthDay</b> is the day of the month you want allocated.  If monthDay=’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For <b>monthType M</b>, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>
<p>
  <b>Repeats will end on the date specified by the end date.</b>
</p> """,
    tags=['resource_allocation_management', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_resources__id_allocations(
    id: str, body: ResourceAllocationInputModel = None
):
    """
    Create Allocation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/resources/{id}/availability',
    description=""" <p>Use this endpoint to view the <b>Weekly Availability</b> for a resource. The displayed available times are represented in the resource's timezone. The resource timezone can be set to any world timezone. If not provided, by default it is set to the Business timezone.</p> """,
    tags=[
        'appointment_management',
        'service_availability_management',
        'calendar_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_resources__id_availability(id: str):
    """
    List Weekly Availability
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/resources/{id}/availability',
    description=""" <p>Use this endpoint to <b>Update</b> resource weekly availability. A valid <b>resource id</b> is required. The availability day entries are created when a resource object is created.</p>
<p>To update weekly availability hours, all days of the week must be provided. Days are defined as <b>sun, mon, tue, wed, thu, fri</b> and <b>sat</b>. The <b>startTime</b> and <b>endTime</b> fields are entered in <b>military format. e.g., 800 is 8:00am, 2230 is 10:30pm</b>. We support 24-hour availability, set startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0.</p>
<p>If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the resource. Resources can be set to any world timezone. </p> """,
    tags=['service_availability_management', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_resources__id_availability(
    id: str, body: AvailabilityInputModel = None
):
    """
    Update Weekly Availability
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/resources/{id}/block',
    description=""" <p>Use this endpoint to <b>Create</b> a Resource Block. A valid <b>resource id</b> is required.</p>
<p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>.</p>
<p>Resource blocks can be set to specific time ranges or for the whole day. Use the <b>AllDay</b> setting to create an all-day block. <b>AllDay</b> will automatically set startTime to 0 and endTime to 2400.</p>
<p>Resource blocks can be for a specific date range instance or set to repeat at a specified frequency. </p>
<p>
  <b>Repeat object: (repeats = true)</b>
</p>
<p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>
<p>Use the <b>interval</b> property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. <b>If using the repeat functionality an interval value is required</b>.</p>
<p>
  <b>DAILY BLOCKS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>
<p>
  <b>WEEKLY BLOCKS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b> is required and should be set to <b>“W”</b>.  You must specify the <b>weekdays</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>. For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.</p>
<p>
  <b>MONTHLY BLOCKS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly, <b>monthDay</b> is the day of the month you want blocked.  If monthDay=’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For <b>monthType M</b>, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”. </p>
<p>
  <b>Repeats will end on the date specified by the end date.</b>
</p> """,
    tags=['resource_block_management', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_resources__id_block(id: str, body: ResourceBlockInputModel = None):
    """
    Create Block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/resources/{id}/blocks',
    description=""" <p>Use this endpoint to return a list of <b>Resource Blocks</b>. A valid <b>resource id</b> is required. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p> """,
    tags=['resource_block_management', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_resources__id_blocks(
    id: str,
    start_date: Optional[datetime] = Query(None, alias='startDate'),
    end_date: Optional[datetime] = Query(None, alias='endDate'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Resource Blocks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/resources/{id}/calendar/auth/google/{googleEmailAddress}',
    description=""" <p>Use this endpoint to return the <b>Resources Google Calendar Authorization URL</b>. A valid <b>resource id</b> and <b>Google Email Address</b> are required.</p> """,
    tags=['resource_url_management', 'google_calendar_service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_google_resource_url(
    id: str,
    google_email_address: str = Path(..., alias='googleEmailAddress'),
    google_auth_return_url: Optional[str] = Query(None, alias='googleAuthReturnUrl'),
):
    """
    Get Resource Google URL
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/resources/{id}/calendar/auth/outlook/{outlookEmailAddress}',
    description=""" <p>Use this endpoint to return the <b>Resources Outlook Calendar Authorization URL</b>. A valid <b>resource id</b> and <b>Outlook Email Address</b> are required.</p> """,
    tags=['resource_url_management', 'calendar_service_linking'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_outlook_resource_url(
    id: str,
    outlook_email_address: str = Path(..., alias='outlookEmailAddress'),
    outlook_auth_return_url: Optional[str] = Query(None, alias='outlookAuthReturnUrl'),
):
    """
    Get Resource Outlook URL
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/resources/{id}/deleteimage',
    description=""" <p>Use this endpoint to permanently <b>Delete</b> a previously uploaded resource image. A valid <b>resource id</b> is required.</p> """,
    tags=['resource_management', 'service_image_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_resources__id_deleteimage(id: str):
    """
    Delete Resource Image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/resources/{id}/reassign/appointments/{resourceId}',
    description=""" <p>Use this endpoint to <b>Reassign</b> appointments from one resource to another. If the startDate is not supplied, the default is today's date + 1 day; If the endDate is not supplied, all future appointments from the start date will be reassigned. If the calendar id is not supplied the default is the primary calendar of the location.</p> """,
    tags=[
        'appointment_management',
        'resource_management',
        'resource_allocation_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_resources__id_reassign_appointments__resource_id(
    id: str,
    resource_id: str = Path(..., alias='resourceId'),
    start_date: Optional[datetime] = Query(None, alias='startDate'),
    end_date: Optional[datetime] = Query(None, alias='endDate'),
    calendar_id: Optional[str] = Query(None, alias='calendarId'),
):
    """
    Reassign Resource
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/resources/{id}/recover',
    description=""" <p>Use this endpoint to <b>Recover</b> a deleted resource. A valid <b>resource id</b> is required.</p> """,
    tags=['resource_recovery_handling', 'resource_url_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_resources__id_recover(
    id: str,
    google_auth_return_url: Optional[str] = Query(None, alias='googleAuthReturnUrl'),
    outlook_auth_return_url: Optional[str] = Query(None, alias='outlookAuthReturnUrl'),
):
    """
    Recover Resource
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/resources/{id}/services',
    description=""" <p>Use this endpoint to <b>Delete</b> linked services from a Resource, i.e. unlink the services. A valid <b>resource id</b> is required. Once deleted, all services become available to the resource.</p> """,
    tags=['linked_services_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_resources__id_services(id: str):
    """
    Delete Linked Services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/resources/{id}/services',
    description=""" <p>Use this endpoint to explicitly <b>Link Services</b> to a Resource. A valid <b>resource id</b> is required.</p>
<p>
  <b>Note:</b> By default, the services array is empty which signifies that all services are provided by the resource. Linking services here will add to the linked service(s) array available to this resource. This will limit the services available to the resource.</p>
<p>You cannot post services that already exist in the array, you can only add new ones. Use the <i>PUT ​/setup​/v1​/resources​/{id}​/services</i> endpoint to update the entire list.</p> """,
    tags=['linked_services_operations', 'resource_management', 'service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_resources__id_services(
    id: str, body: SetupV1ResourcesIdServicesPostRequest = None
):
    """
    Create Linked Services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/resources/{id}/services',
    description=""" <p>Use this endpoint to <b>Update</b> the linked services of a Resource. A valid <b>resource id</b> is required.</p>
<p>Updating services with this endpoint will update the linked services available to the resource. Only those services will be available to the resource.</p>
<p>
  <b>Note:</b> This is a destructive process, any existing linked services will be removed and replaced with the list of services supplied here. Provide the resources complete list of services when using this endpoint.</p> """,
    tags=['linked_services_operations', 'resource_management', 'service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_resources__id_services(
    id: str, body: SetupV1ResourcesIdServicesPutRequest = None
):
    """
    Update Linked Services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/resources/{id}/uploadimage',
    description=""" <p>Use this endpoint to <b>Upload</b> a resource image to the resource. A valid <b>resource id</b> is required. You must convert the image to a <b>base64 encoded string</b> and pass that string as input along with your <b>filename</b>.</p> """,
    tags=['resource_management', 'service_image_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_resources__id_uploadimage(
    id: str, body: ResourceImageInputModel = None
):
    """
    Upload Resource Image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/servicegroups',
    description=""" <p>Use this endpoint to return a list of <b>Service Groups</b> for the requested location. If no business location is specified it will default to the Primary Business Location of the company. Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the other query parameters to filter the results further.</p> """,
    tags=['service_group_management', 'service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_servicegroups(
    location_id: Optional[str] = Query(None, alias='locationId'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Service Groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/servicegroups',
    description=""" <p>Use this endpoint to <b>Create</b> a Service Group. If no locationId is specified in the body, the business location will default to the primary business location. Service groups are used to categorize services. Service groups are optional and only make sense if you have multiple services that will be easier read if categorized. Only the service group Type of 0 is supported by the API. It defaults to 0 if not supplied.</p> """,
    tags=['service_group_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_servicegroups(body: ServiceGroupInputModel = None):
    """
    Create Service Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/servicegroups/{id}',
    description=""" <p>Use this endpoint to <b>Delete</b> a Service Group object. A valid <b>serviceGroup id</b> is required. The service group is not permanently deleted and can be recovered by using the <i>PUT ​/setup​/v1​/servicegroups​/{id}​/recover</i> endpoint.</p> """,
    tags=['service_group_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_servicegroups__id(id: int):
    """
    Delete Service Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/servicegroups/{id}',
    description=""" <p>Use this endpoint to return a <b>Service Group</b> object. A valid <b>serviceGroup id</b> is required. Find service group id's by using the <i>GET /setup/v1/serviceGroups</i> endpoint.</p> """,
    tags=['service_group_management', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_servicegroups__id(id: int):
    """
    Get Service Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/servicegroups/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> a Service Group object. A valid <b>serviceGroup id</b> is required. </p> """,
    tags=['service_group_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_servicegroups__id(id: int, body: ServiceGroupInputModel = None):
    """
    Update Service Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/servicegroups/{id}/recover',
    description=""" <p>Use this endpoint to <b>Recover</b> a deleted Service Group. A valid <b>serviceGroup id</b> is required. </p> """,
    tags=['service_group_management', 'resource_recovery_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_servicegroups__id_recover(id: int):
    """
    Recover Service Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/services',
    description=""" <p>Use this endpoint to return a <b>List of Service</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p> """,
    tags=[
        'linked_services_operations',
        'service_management',
        'service_group_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_services(
    location_id: Optional[str] = Query(None, alias='locationId'),
    service_group_id: Optional[int] = Query(None, alias='serviceGroupId'),
    deleted: Optional[bool] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/services',
    description=""" <p>Use this endpoint to <b>Create</b> a new service. If not specified, the business location defaults to the primary business location. Note: Posting a service to the Primary Business Location will scope as company scoped and make the service available to all locations. If you want a service to only be available from a specific location, include the business location id.</p>
<p>Required fields: <b>Name</b> and <b>Duration</b></p>
<p>The service <b>Type</b> is either, <b>1 = Appointment</b> or <b>2 = Event</b>. Default is 1 if not specified.</p>
<p>For type = 1, Appointments - Create an availability entry for each weekday to provide the service for. <b>All days of the week must be provided when adding service availability.</b> Days are defined as <b>sun, mon, tue, wed, thu, fri</b> and <b>sat</b>. Start and End Times are entered in military format. e.g., 800 is 8:00am, 2230 is 10:30pm. If not provided, it defaults to the primary location business hours.</p>
<p>We support 24-hour availability, set startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0. If you require times in between specified hours to be unavailable, use the service block endpoint at: <i>POST ​/setup​/v1​/services​/{id}​/block</i>.</p>
<p>For type = 2, Events - Create service allocations for their availability. Refer to the: <i>POST /setup​/v1​/services​/{id}​/allocations</i> to set up service allocations for the event.</p>
<p>Options are available for customer selected durations, for details: <a href="https://docs.onsched.com/docs/services-overview#variable-duration">Variable Duration Overview</a></p>
<p>Additional parameters include but are not limited to bookingLimit, maxCapacity and maxGroupSize. For details: <a href="https://docs.onsched.com/docs/service-max-capacity">Service Limits Overview</a></p> """,
    tags=['service_management', 'linked_services_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_services(body: ServiceInputModel = None):
    """
    Create Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/services/allocations/{id}',
    description=""" <p>Use this endpoint to permanently <b>Delete</b> a service allocation. A valid <b>serviceAllocation id</b> is required.</p> """,
    tags=['resource_allocation_management', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_services_allocations__id(id: str):
    """
    Delete Allocation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/services/allocations/{id}',
    description=""" <p>Use this endpoint to <b>Get a Service Allocation</b>. A valid <b>serviceAllocation id</b> is required.</p> """,
    tags=['resource_management', 'resource_allocation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_services_allocations__id(id: str):
    """
    Get Allocation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/services/allocations/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> a service allocation. A valid <b>serviceAllocation id</b> is required. Refer to the <i>POST /setup/v1/services/{id}/allocations</i> endpoint for fields names and details.</p> """,
    tags=['resource_allocation_management', 'service_allocation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_services_allocations__id(
    id: str, body: ServiceAllocationUpdateModel = None
):
    """
    Update Allocation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/services/block/{id}',
    description=""" <p>Use this endpoint to permanently <b>Delete</b> a Service Block. A valid <b>serviceBlock id</b> is required.</p> """,
    tags=['resource_block_management', 'calendar_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_services_block__id(id: str):
    """
    Delete Block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/services/block/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> a Service Block. A valid <b>serviceBlock id</b> is required.</p> """,
    tags=['resource_block_management', 'service_block_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_services_block__id(id: str, body: ServiceBlockUpdateModel = None):
    """
    Update Block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/services/blocks/{id}',
    description=""" <p>Use this endpoint to <b>Get a Service Block</b>. A valid <b>serviceBlock id</b> is required.</p> """,
    tags=['calendar_management', 'resource_block_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_services_blocks__id(id: str):
    """
    Get Block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/services/calendar',
    description=""" <p>Use this endpoint to <b>Link a Service</b> to a calendar. </p> """,
    tags=[
        'calendar_management',
        'calendar_service_linking',
        'linked_services_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_services_calendar(body: ServiceCalendarInputModel = None):
    """
    Link Service to Calendar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/services/calendar/{id}',
    description=""" <p>Use this endpoint to <b>Delete</b> service links from the calendar specified. A valid <b>calendar id</b> is required.</p> """,
    tags=['linked_services_operations', 'service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_services_calendar__id(id: str):
    """
    Delete Service Links
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/services/{id}',
    description=""" <p>Use this endpoint to <b>Delete</b> a service object. A valid <b>service id</b> is required. The service is not permanently deleted and can be recovered by using the <i>PUT /setup​/v1​/services​/{id}​/recover</i> endpoint.</p> """,
    tags=['service_management', 'linked_services_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_services__id(id: str):
    """
    Delete Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/services/{id}',
    description=""" <p>Use this endpoint to return a <b>Service</b> object. A valid <b>service id</b> is required. Find service id's by using the <i>GET /setup/v1/services</i> endpoint.</p> """,
    tags=['service_management', 'linked_services_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_services__id(id: int):
    """
    Get Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/services/{id}',
    description=""" <p>Use this endpoint to <b>Update</b> a service object. A valid <b>service id</b> is required.</p> """,
    tags=['service_management', 'linked_services_operations', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_services__id(id: str, body: ServiceUpdateModel = None):
    """
    Update Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/services/{id}/allocations',
    description=""" <p>Use this endpoint to return a <b>List of Service Allocations</b> for a specified service. A valid <b>service id</b> is required. Service allocations are used for <b>Event type services only</b> where the events are offered on specific dates and times. Retrieve all allocations for a location by passing in 0 as the service id.</p>
<p>The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p> """,
    tags=['resource_allocation_management', 'service_allocation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_services__id_allocations(
    id: str,
    location_id: Optional[str] = Query(None, alias='locationId'),
    resource_id: Optional[str] = Query(None, alias='resourceId'),
    start_date: Optional[datetime] = Query(None, alias='startDate'),
    end_date: Optional[datetime] = Query(None, alias='endDate'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Service Allocations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/services/{id}/allocations',
    description=""" <p>Use this endpoint to <b>Create</b> a service allocation for a service. A valid <b>service id</b> is required. Service allocations are used for <b>Event type services only</b>. Service allocations allow you to specify the time(s) a service is available as opposed to using weekly availability which represents a weekly schedule, ie: Mon-Fri 9am-5pm.</p>
<p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>. Service allocations can be set to specific time ranges or for the whole day by setting startTime=0 and endTime=2400. Service allocations can repeat for a specific date range instance or set to repeat at a specified frequency.</p>
<p>
  <b>Repeat object: (repeats = true)</b>
</p>
<p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>
<p>Use the <b>interval</b> property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  <b>If using the repeat functionality an interval value is required</b>.</p>
<p>
  <b>DAILY ALLOCATIONS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>
<p>
  <b>WEEKLY ALLOCATIONS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b> is required and should be set to <b>“W”</b>. You must specify the <b>“weekdays”</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.</p>
<p>
  <b>MONTHLY ALLOCATIONS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly. <b>monthDay</b> is the day of the month you want allocated.  If monthDay=’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For <b>monthType M</b>, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>
<p>
  <b>Repeats will end on the date specified by the end date.</b>
</p> """,
    tags=['resource_allocation_management', 'service_allocation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_services__id_allocations(
    id: str, body: ServiceAllocationInputModel = None
):
    """
    Create Allocation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/services/{id}/allocations/bulk',
    description=""" <p>Use this endpoint to <b>Create</b> bulk service allocations. A valid <b>service id</b> is required. Use this endpoint only if you need to POST multiple service allocations in one transaction. For details refer to: <a href="POST ​/setup​/v1​/services​/{id}​/allocations">Post Service Allocation</a></p> """,
    tags=[
        'resource_allocation_management',
        'service_allocation_management',
        'bulk_resource_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_services__id_allocations_bulk(
    id: str, body: ServiceAllocationsInputModel = None
):
    """
    Create Allocations Bulk
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/services/{id}/availability',
    description=""" <p>Use this endpoint to return the <b>Weekly Service Availability</b> for an appointment service. A valid <b>service id</b> is required. Weekly availability is returned for services where the Type = 1. For event type services, where service Type = 2, refer to the <i>GET ​/setup​/v1​/services​/{id}​/allocations</i> endpoint.</p> """,
    tags=['service_availability_management', 'calendar_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_services__id_availability(id: str):
    """
    Get Weekly Availability
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/services/{id}/availability',
    description=""" <p>Use this endpoint to <b>Update</b> service weekly availability. A valid <b>service id</b> is required. The availability day entries are created when a service object is created.</p>
<p>To update weekly availability hours, all days of the week must be provided. Days are defined as <b>sun, mon, tue, wed, thu, fri</b> and <b>sat</b>. The <b>startTime</b> and <b>endTime</b> fields are entered in <b>military format. e.g., 800 is 8:00am, 2230 is 10:30pm</b>. We support 24-hour availability, set startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0.</p>
<p>If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the business location.</p> """,
    tags=['service_availability_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_services__id_availability(
    id: str, body: AvailabilityInputModel = None
):
    """
    Update Weekly Availability
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/services/{id}/block',
    description=""" <p>Use this endpoint to <b>Create</b> a Service Block. A valid <b>service id</b> is required.</p>
<p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>.</p>
<p>Service blocks can be set to specific time ranges or for the whole day. To block a whole day set startTime to 0 and endTime to 2400.</p>
<p>Service blocks can be for a specific date range instance or set to repeat at a specified frequency. </p>
<p>
  <b>Repeat object: (repeats = true)</b>
</p>
<p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>
<p>Use the <b>interval</b> property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. <b>If using the repeat functionality an interval value is required</b>.</p>
<p>
  <b>DAILY BLOCKS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>
<p>
  <b>WEEKLY BLOCKS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b> is required and should be set to <b>“W”</b>.  You must specify the <b>weekdays</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>. For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.</p>
<p>
  <b>MONTHLY BLOCKS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly, <b>monthDay</b> is the day of the month you want blocked.  If monthDay=’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For <b>monthType M</b>, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>
<p>
  <b>Repeats will end on the date specified by the end date.</b>
</p> """,
    tags=['resource_block_management', 'service_block_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_services__id_block(id: str, body: ServiceBlockInputModel = None):
    """
    Create Block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/services/{id}/blocks',
    description=""" <p>Use this endpoint to return a list of <b>Service Blocks</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p> """,
    tags=['service_block_handling', 'resource_block_management', 'service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_services__id_blocks(
    id: str,
    start_date: Optional[datetime] = Query(None, alias='startDate'),
    end_date: Optional[datetime] = Query(None, alias='endDate'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List Service Blocks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/services/{id}/calendar',
    description=""" <p>Use this endpoint to <b>Get the Linked Calendar</b> for the service requested. A valid <b>service id</b> is required. A service can only be linked to one calendar in a location.</p> """,
    tags=['calendar_management', 'calendar_service_linking'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_services__id_calendar(
    id: str, location_id: Optional[str] = Query(None, alias='locationId')
):
    """
    Get Linked Calendar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/setup/v1/services/{id}/deleteimage',
    description=""" <p>Use this endpoint to permanently <b>Delete</b> a previously uploaded service image. A valid <b>service id</b> is required.</p> """,
    tags=['service_image_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_setup_v1_services__id_deleteimage(id: str):
    """
    Delete Service Image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/setup/v1/services/{id}/recover',
    description=""" <p>Use this endpoint to <b>Recover</b> a deleted service object. A valid <b>service id</b> is required.</p> """,
    tags=[
        'service_management',
        'resource_recovery_handling',
        'service_group_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def put_setup_v1_services__id_recover(id: str):
    """
    Recover Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setup/v1/services/{id}/resources',
    description=""" <p>Use this endpoint to return a list of <b>Resources</b> that provide the requested service. A valid <b>service id</b> is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p> """,
    tags=['service_resource_listing', 'resource_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_setup_v1_services__id_resources(
    id: str,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    google_auth_return_url: Optional[str] = Query(None, alias='googleAuthReturnUrl'),
    outlook_auth_return_url: Optional[str] = Query(None, alias='outlookAuthReturnUrl'),
):
    """
    List Resources for Service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setup/v1/services/{id}/uploadimage',
    description=""" <p>Use this endpoint to <b>Upload</b> an image to the service. A valid <b>service id</b> is required. You must convert the image to a <b>base64 encoded string</b> and pass that string as input along with your <b>filename</b>.</p> """,
    tags=['service_image_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_setup_v1_services__id_uploadimage(
    id: str, body: ServiceImageInputModel = None
):
    """
    Upload Service Image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
